import React, { ReactElement } from 'react';
import { FormConfig } from './$Form';
import { Field } from './fields/Field';
import { Submitter } from './submit/Submitter';
import { FormProps } from './utils/htmlProps';
import { FormState } from './useFormState';
interface IForm {
    readonly config: FormConfig;
    readonly fields: FormFields;
    readonly submitter: Submitter;
    readonly state: FormState;
    readonly hasBeenSubmitted: boolean;
    readonly props: FormProps;
    readonly isValid: boolean;
    fillWith(data: object): void;
    render(): ReactElement;
    renderFields(): ReactElement;
    renderSubmit(): ReactElement;
    submit(): Promise<void>;
    getValuesAssumingTheyAreValid(): FormValues;
}
export declare type FormFields = Record<string, Field<any, any>>;
export declare type FormValues = {
    [p: string]: any;
};
export declare class Form implements IForm {
    readonly config: FormConfig;
    readonly fields: FormFields;
    readonly submitter: Submitter;
    readonly state: FormState;
    constructor(config: FormConfig, fields: FormFields, submitter: Submitter, state: FormState);
    readonly hasBeenSubmitted: boolean;
    readonly props: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
    private static propsFor;
    readonly isValid: boolean;
    fillWith(data: object): void;
    render(): ReactElement;
    renderFields(): ReactElement;
    renderSubmit(): ReactElement;
    submit(): Promise<void>;
    getValuesAssumingTheyAreValid(): FormValues;
}
export {};
