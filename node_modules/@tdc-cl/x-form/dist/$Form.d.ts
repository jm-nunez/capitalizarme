import { FieldSpec } from './fields/FieldSpec';
import { $Submitter } from './submit/$Submitter';
import { Form } from './Form';
import { FormProps } from './utils/htmlProps';
export interface FormConfig {
    readonly fields: $FormFields;
    readonly submit: $Submitter;
    readonly props?: FormProps;
}
export declare type FieldTransform = <S, T>(field: FieldSpec<S, T>, name: string, fields: $FormFields) => FieldSpec<S, T>;
/** @see $Form */
declare class _$Form {
    readonly config: FormConfig;
    constructor(config: FormConfig);
    with(config: Partial<FormConfig>): $Form;
    each(fieldTransform: FieldTransform): $Form;
    /** Makes the whole form read-only,
     * i.e. every field become read-only and the submit button is disabled. */
    readOnly(): $Form;
}
export declare type $Form = _$Form;
export declare function $Form(config: FormConfig): $Form;
export declare namespace $Form {
    var prototype: _$Form;
}
declare type $FormFields = {
    [p: string]: FieldSpec<any, any>;
};
export declare function useForm(form: $Form): Form;
export {};
