import { ButtonSpec } from './button';
import { ReactElement } from 'react';
import { ButtonProps } from '../utils/htmlProps';
import { Submitter } from './Submitter';
import { Form } from '../Form';
export interface SubmitConfig {
    readonly label?: string | ReactElement;
    readonly onValid: OnValid;
    readonly onInvalid?: OnInvalid | 'disable';
    readonly onError?: OnError;
    readonly buttonProps?: ButtonProps;
}
export declare type OnValid = (values: any) => Promise<void>;
export declare type OnInvalid = (form: Form) => void;
export declare type OnError = (err: Error, form: Form) => void;
interface I$Submitter {
    readonly config: SubmitConfig;
    with(config: Partial<SubmitConfig>): ButtonSpec;
}
export declare class $Submitter implements I$Submitter {
    readonly config: SubmitConfig;
    constructor(config: SubmitConfig);
    with(config: Partial<SubmitConfig>): $Submitter;
}
export declare function useSubmitter(submitter: $Submitter): Submitter;
export {};
