import { ButtonSpec } from '../builtin/button';
import { ReactElement } from 'react';
import { ButtonProps } from '../utils/htmlProps';
import { Submitter } from './Submitter';
import { Form } from './Form';
export interface SubmitConfig<T = any> {
    readonly label?: string | ReactElement;
    readonly onValid: OnValid<T>;
    readonly onInvalid?: OnInvalid<T> | 'disable';
    readonly onError?: OnError<T>;
    readonly buttonProps?: ButtonProps;
}
export declare type OnValid<T> = (values: T) => Promise<void>;
export declare type OnInvalid<T> = (form: Form<T>) => void;
export declare type OnError<T> = (err: Error, form: Form<T>) => void;
interface I$Submitter<T> {
    readonly config: SubmitConfig<T>;
    with(config: Partial<SubmitConfig<T>>): ButtonSpec<T>;
}
export declare class $Submitter<T = any> implements I$Submitter<T> {
    readonly config: SubmitConfig<T>;
    constructor(config: SubmitConfig<T>);
    with(config: Partial<SubmitConfig<T>>): $Submitter<T>;
}
export declare function useSubmitter<T>(submitter: $Submitter<T>): Submitter<T>;
export {};
