import { FieldSpec } from './FieldSpec';
import { $Submitter } from './$Submitter';
import { Form } from './Form';
import { FormProps } from '../utils/htmlProps';
import { FieldSpecs } from '../utils/types';
export interface FormConfig<T = any> {
    readonly fields: FieldSpecs<T>;
    readonly submit: $Submitter<T>;
    readonly props?: FormProps;
}
export declare type FieldTransform<F> = <S, T>(field: FieldSpec<S, T>, name: string, fields: FieldSpecs<F>) => FieldSpec<S, T>;
/** @see $Form */
declare class _$Form<T> {
    readonly config: FormConfig<T>;
    constructor(config: FormConfig<T>);
    with(config: Partial<FormConfig<T>>): $Form<T>;
    each(fieldTransform: FieldTransform<T>): $Form<T>;
    /** Makes the whole form read-only,
     * i.e. every field become read-only and the submit button is disabled. */
    readOnly(): $Form<T>;
}
export declare type $Form<T = any> = _$Form<T>;
export declare function $Form<T>(config: FormConfig<T>): $Form<T>;
export declare namespace $Form {
    var prototype: _$Form<any>;
}
export declare function useForm<T = any>(form: $Form<T>): Form<T>;
export {};
