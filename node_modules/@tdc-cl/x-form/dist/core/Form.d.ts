import React, { ReactElement } from 'react';
import { FormConfig } from './$Form';
import { Field } from './Field';
import { Submitter } from './Submitter';
import { FormProps } from '../utils/htmlProps';
import { FormState } from './useFormState';
import { Fields } from '../utils/types';
interface IForm<T> {
    readonly config: FormConfig<T>;
    readonly fields: Fields<T>;
    readonly submitter: Submitter<T>;
    readonly state: FormState;
    readonly hasBeenSubmitted: boolean;
    readonly props: FormProps;
    readonly shownFields: Partial<Fields<T>>;
    readonly isValid: boolean;
    fillWith(data: Record<string, unknown>): void;
    render(): ReactElement;
    renderFields(): ReactElement;
    renderSubmit(): ReactElement;
    submit(): Promise<void>;
    getValuesAssumingTheyAreValid(): T;
    reset(): void;
}
export declare type FormFields = Record<string, Field<any, any>>;
export declare type FormValues = {
    [p: string]: any;
};
export declare class Form<T = any> implements IForm<T> {
    readonly config: FormConfig<T>;
    readonly fields: Fields<T>;
    readonly submitter: Submitter<T>;
    readonly state: FormState;
    constructor(config: FormConfig<T>, fields: Fields<T>, submitter: Submitter<T>, state: FormState);
    readonly hasBeenSubmitted: boolean;
    readonly props: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
    private static propsFor;
    get shownFields(): Partial<Fields<T>>;
    private lazyShownFields;
    get isValid(): boolean;
    private lazyIsValid;
    fillWith(data: Record<string, unknown>): void;
    render(): ReactElement;
    renderFields(): ReactElement;
    renderSubmit(): ReactElement;
    submit(): Promise<void>;
    getValuesAssumingTheyAreValid(): T;
    reset(): void;
}
export {};
