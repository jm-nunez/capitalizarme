import { FieldConfig, FieldDefaults, FieldSpec } from './FieldSpec';
import { ReactElement } from 'react';
import { InferS, InferT, PartialDeep } from '../utils/types';
export interface ICustomField {
    <S, T>(defaults: FieldDefaults<S, T>): I$CustomField<S, T>;
    extends<S, T>(base: {
        defaults: FieldDefaults<S, T>;
    }): {
        with(extension: PartialDeep<FieldDefaults<S, T>>): I$CustomField<S, T>;
    };
    composite<F extends Record<string, FieldSpec<any, any>>>(subFields: F): {
        with(extension: PartialDeep<FieldDefaults<InferS<F>, InferT<F>>>): I$CustomField<InferS<F>, InferT<F>>;
    };
}
export interface I$CustomField<S, T> {
    (config: FieldConfig<S, T>): FieldSpec<S, T>;
    (label: string): FieldSpec<S, T>;
    (label: ReactElement): FieldSpec<S, T>;
    (label?: null | undefined): FieldSpec<S, T>;
    defaults: FieldDefaults<S, T>;
}
export declare const CustomField: ICustomField;
