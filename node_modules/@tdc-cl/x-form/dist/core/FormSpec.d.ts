import { FieldSpec } from './FieldSpec';
import { SubmitConfig } from './SubmitConfig';
import { Form } from './Form';
import { FormProps } from '../utils/htmlProps';
import { FieldSpecs } from '../utils/types';
export interface FormConfig<T = any> {
    readonly fields: FieldSpecs<T>;
    readonly submit?: SubmitConfig<T>;
    readonly props?: FormProps;
}
export declare type FieldTransform<F> = <S, T>(field: FieldSpec<S, T>, name: string, fields: FieldSpecs<F>) => FieldSpec<S, T>;
export declare class FormSpec<T> {
    readonly config: FormConfig<T>;
    constructor(config: FormConfig<T>);
    with(config: Partial<FormConfig<T>>): FormSpec<T>;
    each(fieldTransform: FieldTransform<T>): FormSpec<T>;
    /** Makes the whole form read-only,
     * i.e. every field become read-only and the submit button is disabled. */
    readOnly(): FormSpec<T>;
}
export declare function useForm<T = any>(spec: FormSpec<T>, submit: SubmitConfig<T>): Form<T>;
